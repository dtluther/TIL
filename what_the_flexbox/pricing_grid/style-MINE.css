/* Some CSS Setup - nothing to do with flexbox */
html {
  box-sizing: border-box;
}

*, *:before, *:after {
  box-sizing: inherit;
}

body {
  font-family: sans-serif;
  margin: 0;
  background-image: linear-gradient(260deg, #2376ae 0%, #c16ecf 100%);
}

a {
  color:white;
}

.plan ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.plan ul li {
  border-bottom: 1px solid rgba(0,0,0,0.1);
  padding:10px;
}

.plan ul li:last-child {
  border-bottom: 0;
}

.plan a {
  text-decoration: none;
  background:#FEFF00;
  padding:10px;
  color:black;
  border-radius:4px;
}


.plan h2 {
  text-transform: uppercase;
  color:white;
  letter-spacing: 2px;
  text-shadow:3px 3px 0 rgba(0,0,0,0.1);
}

.price {
  font-size: 50px;
  font-family: serif;
  margin: 10px 0;
}

/* Flex Container */
.pricing-grid {
  max-width:750px;
  margin: 0 auto;
  
  display: flex;
  /* align-items: center; */
}

.plan {
  background: rgba(255, 255, 255, 0.2);
  margin: 20px;
  padding: 20px;
  border-radius: 4px;
  text-align: center;

  flex: 1;
  display: flex;
  /* flex-direction: column; */
  flex-wrap: wrap;
  /* By using wrap with a `flex-basis: 100%`, it makes everything
  on its own line, so it's set up like a column. */
}

.plan > * {
  flex: 1 1 100%;
  /* Remember, flex-basis (the 100%) will operate similarly to
  `min width`, but when we shrink the screen smaller than the
  `flex-basis` size, the flex items shrink, whereas `min-width`
  would cause the user to need a scroll bar to see the items. */
}

.plan .cta {
  align-self: flex-end;
  /* This is how we get the buttons of shorter columns to 
  also be aligned at the bottom. However, in order to do
  this, we need to make the container of this item (.plan)
  a flex container. */
}